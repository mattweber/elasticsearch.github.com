---
layout: guide
title: Update API
cat: guide
sidebar: reference_api
---

p. The update API allows to update a document using a script or update "doc" containing the updated fields. The update operation performs the following steps:

* gets the document (collocated with the shard) from the index
* if a document was found it updates the document using the script (with optional script language and parameters) or the update "doc" if a script is not provided.  When no document is found and an upsert document is specified, the upsert will used.
* index back the resulting document (if using a script, it also allows to delete, or ignore the operation)

p. The update operation uses versioning to make sure no updates have happened during the "get" and "reindex". (available from @0.19@ onwards).

p. Note, this operation still means full reindex of the document, it just removes some network roundtrips and reduces chances of version conflicts between the get and the index.

p. For example, lets index a simple doc:

<pre class="prettyprint">
curl -XPUT localhost:9200/test/type1/1 -d '{
    "counter" : 1,
    "tags" : ["red"],
    "name" : {
        "first" : "Shay"
    }
}'
</pre>

p. Now, we can execute a script that would increment the counter:

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.counter += count",
    "params" : {
        "count" : 4
    }
}'
</pre>

p. We can also add a tag to the list of tags (note, if the tag exists, it will still add it, since its a list):

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.tags += tag",
    "params" : {
        "tag" : "blue"
    }
}'
</pre>

p. We can also add a new field to the document:

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.text = \"some text\""
}'
</pre>

p. We can add the same new field using the update "doc":

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "doc" : { "text" : "some text" }
}'
</pre>

p. Object fields are updated recursively when using the update "doc" (_after this update, name.first=Shay and name.last=Banon_):

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "doc" : {
        "name" : {
            "last" : "Banon"
        }
    }
}'
</pre>

p. We can also remove a field from the document:

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.remove(\"text\")"
}'
</pre>

p. And, we can delete the doc if the tags contain blue, or ignore (noop):

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/1/_update' -d '{
    "script" : "ctx._source.tags.contains(tag) ? ctx.op = \"delete\" : ctx.op = \"none\"",
    "params" : {
        "tag" : "blue"
    }
}'
</pre>

p. If we try to update a document that does not exist and specify an upsert document, the upsert document will be indexed.

<pre class="prettyprint">
curl -XPOST 'localhost:9200/test/type1/2/_update' -d '{
    "script" : "ctx._source.counter += count",
    "params" : {
        "count" : 4
    },
    "upsert" : {
        "counter" : 1
    }
}'
</pre>

p. The update operation supports similar parameters as the index API, including:

* @routing@: Sets the routing that will be used to route the document to the relevant shard.
* @parent@: Simply sets the routing.
* @timeout@: Timeout waiting for a shard to become available.
* @replication@: The replication type for the delete/index operation (sync or async).
* @consistency@: The write consistency of the index/delete operation.
* @percolate@: Enables percolation and filters out which percolator queries will be executed.
* @refresh@: Refresh the index immediately after the operation occurs, so that the updated document appears in search results immediately.
* @ttl@: The @ttl@ for the upsert or update "doc".

p. And also support @retry_on_conflict@ which controls how many times to retry if there is a version conflict between getting the document and indexing / deleting it. Defaults to @0@.

p. It also allows to update the @ttl@ of a document using @ctx._ttl@ and timestamp using @ctx._timestamp@. Note that if the timestamp is not updated and not extracted from the @_source@ it will be set to the update date.